"use client";

import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import { FontClassNames } from "@/styles/font";
import { useAccessToken, useUserInfo } from "./stores/global";
import { useEffect, useState } from "react";
import SignUpModal from "./components/signup/signUp";
import LoginModal from "./components/login/index";

const inter = Inter({ subsets: ["latin"] });

const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const [isSignUpModalOpen, setIsSignUpModalOpen] = useState(false);
  const [isLoginModalOpen, setIsLoginModalOpen] = useState(false);
  const { accessToken, removeAccessToken } = useAccessToken();
  const { userInfo, removeUserInfo } = useUserInfo();
  const [isMount, setIsMount] = useState(false);
  useEffect(() => {
    setIsMount(true);

    if (isSignUpModalOpen || isLoginModalOpen) {
      const scrollY = window.scrollY;
      document.body.style.cssText = `
        position: fixed; 
        top: -${scrollY}px;
        overflow-y: scroll;
        width: 100%;`;
    } else {
      const scrollY = document.body.style.top;
      document.body.style.cssText = "";
      window.scrollTo(0, parseInt(scrollY || "0", 10) * -1);
    }
  }, [isSignUpModalOpen, isLoginModalOpen]);

  const handleLogoutClick = () => {
    removeUserInfo();
    removeAccessToken();
    sessionStorage.removeItem("UserID");
    window.location.reload();
  };
  return (
    <html lang="en">
      <body className={FontClassNames}>
        <nav className="w-full h-[60px] bg-black flex items-center justify-center px-4">
          <ul className="w-full flex justify-between items-center">
            <li>
              <div>
                <button className="relative group">
                  <div className="relative flex overflow-hidden items-center justify-center rounded-full w-[40px] h-[40px] transform transition-all bg-slate-700 ring-0 ring-gray-300 hover:ring-8 group-focus:ring-4 ring-opacity-30 duration-200 shadow-md">
                    <div className="flex flex-col justify-between w-[16px] h-[16px] transform transition-all duration-300 origin-center overflow-hidden">
                      <div className="bg-white h-[2px] w-6 transform transition-all duration-300 origin-left group-focus:translate-x-8"></div>
                      <div className="bg-white h-[2px] w-6 rounded transform transition-all duration-300 group-focus:translate-x-8 delay-75"></div>
                      <div className="bg-white h-[2px] w-6 transform transition-all duration-300 origin-left group-focus:translate-x-8 delay-150"></div>

                      <div className="absolute items-center justify-between transform transition-all duration-500 top-2 -translate-x-8 group-focus:translate-x-0 flex w-0 group-focus:w-10">
                        <div className="absolute bg-white h-[2px] w-4 transform transition-all duration-500 rotate-0 delay-300 group-focus:rotate-45"></div>
                        <div className="absolute bg-white h-[2px] w-4 transform transition-all duration-500 -rotate-0 delay-300 group-focus:-rotate-45"></div>
                      </div>
                    </div>
                  </div>
                </button>
              </div>
            </li>
            <li>
              <div className="text-white w-[510px]">
                {isMount && accessToken !== "" ? (
                  <div className="flex items-center justify-end p-4  ">
                    <p className="text-white text-lg">
                      {userInfo?.Nickname
                        ? `${userInfo?.Nickname}님 아얏스에 오신 것을 환영합니다!`
                        : "로딩 중..."}
                    </p>
                    <button
                      type="button"
                      onClick={handleLogoutClick}
                      className="bg-red-500 hover:bg-red-700 ml-2 text-white font-bold py-2 px-4 rounded transition duration-300"
                    >
                      로그아웃
                    </button>
                  </div>
                ) : (
                  <div className="flex justify-end">
                    <span className="inline-block mr-2">
                      <button
                        onClick={() => setIsSignUpModalOpen(true)}
                        className="text-white px-4 py-2 rounded hover:bg-[#ececec] hover:text-black"
                      >
                        회원가입
                      </button>
                    </span>
                    <span className="inline-block">
                      <button
                        onClick={() => setIsLoginModalOpen(true)}
                        className="text-white px-4 py-2 rounded hover:bg-[#ececec] hover:text-black"
                      >
                        로그인
                      </button>
                    </span>
                  </div>
                )}
              </div>
            </li>
          </ul>
        </nav>
        <main>{children}</main>
        {isSignUpModalOpen && (
          <SignUpModal onClose={() => setIsSignUpModalOpen(false)} />
        )}
        {isLoginModalOpen && (
          <LoginModal onClose={() => setIsLoginModalOpen(false)} />
        )}
      </body>
    </html>
  );
}
